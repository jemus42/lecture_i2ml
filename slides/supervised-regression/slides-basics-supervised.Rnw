% Set style/preamble.Rnw as parent.
<<set-parent, include = FALSE>>=
knitr::set_parent("../../style/preamble.Rnw")
@
% Load all R packages and set up knitr
<<setup-r, child="../../style/setup.Rnw", include = FALSE>>=
@

%! includes: basicS-notation, basics-definition

\lecturechapter{Introduction - Supervised Tasks and Data}
\lecture{Introduction to Machine Learning}

\sloppy

\begin{vbframe}{Functions - From Object to Outcome}

\begin{itemize}
\item In supervised ML we would like to construct a mapping from an object to a certain 
aspect of that object.

$$f(\textrm{object}) = \textrm{outcome}$$

\item So we would like to compute / predict / describe the outcome, given an arbitrary object - from a certain set of admissible objects.

\item This $f$ should be computable on a machine.
\end{itemize}

\end{vbframe}

\begin{vbframe}{Computable Functions}

\begin{itemize}
\item This seems like a very general and powerful concept. 
  It is also the same concept as: computable function a.k.a.
  algorithms. 
\item As a computer scientist we would now, for a certain task, sit down and with skill construct $f$ (the mathematical mapping) or its operationalization in steps (an algorithm that computes $f$). 
\item E.g.: 
\begin{itemize}
\item $f(\textrm{list}) = \textrm{nr of elements}$
\item $f(\textrm{graph}) = \textrm{nr of cliques}$
\item $f(\textrm{program, input}) = \textrm{will it stop?}$
\end{itemize}
\item Sometimes this construction is simple and obvious, often more or less hard 
  and sometimes nearly of fully impossible.
\item Computer scientists study theoretically the class of functions which are computable, how fast algorithms scale and how to properly construct and implement them.
\end{itemize}
\end{vbframe}

\begin{vbframe}{Learning Functions On a Machine}
\begin{itemize}
\item Let's be lazy and not construct $f$ manually. 
  It would be nice if the machine not only computes $f$ (when it's fully defined already) but would also construct $f$ automatically.
\item Or assume you need to construct this function
  $$f(\textrm{person}) = \textrm{probabilty of developing breast cancer}$$
Maybe we have absolutely no idea how to construct a function / an algorithm for this problem.
\item ML aims at automatically constructing $f$, given many example objects where we already know the outcome.
\item We humans are pretty good at this, at least for some domains. We learn that for certain patterns in objects, certain outcomes are much more likely. 
  This happens implicitly, gradually through examples over time, without an explicit construction of an "algorithm". Hence, "Learning". 
\end{itemize}
\end{vbframe}

\begin{vbframe}{Features Vectors and Parameters}

\begin{itemize}
\item In order to simplify this problem we (usually) assume that $f$ only has to work on a vector of properties (= features) that describe our object, and not on the (often complex) object itself.
\item And we assume that this set of features is available for these objects, observable / computable for each object, and helpful for computing the outcome. 
Maybe we have absolutely no idea how to construct a function / an algorithm for this problem.
\item E.g.
  $$f(\textrm{person's gene expr. vec.}) = \textrm{prob. of developing breast cancer}$$
\end{itemize}

\end{vbframe}

\begin{vbframe}{Statistical Learning}

\begin{itemize}
\item In statistical learning - which is just another name for ML - we assume also that our function is of a certain "form" or comes from a certain "class" of functions. Again to simplify the problem.
\item And that form is specifiable through a vector of parameters which "fix" the concrete shape of the function.
\item Statistics studies how to learn such functions (or better: their parameters) from example data and how to perform inference on them and interpret the results.
\item Either with simple linear models or non-linear, non-parametric models. 
\item Statistics has a somewhat unfortunate, historic focus on the former, although the maths behind it is applicable to non-linear functions as much as linear functions.
\item All maths in ML is basically statistics-flavoured.
\end{itemize}
\end{vbframe}





\endlecture
