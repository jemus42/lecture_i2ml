% Set style/preamble.Rnw as parent.
<<set-parent, include = FALSE>>=
knitr::set_parent("../../style/preamble.Rnw")
@
% Load all R packages and set up knitr
<<setup-r, child="../../style/setup.Rnw", include = FALSE>>=
@

\lecturechapter{Classification: Basic Definitions}
\lecture{Introduction to Machine Learning}

\begin{vbframe}{Classification Tasks}

In classification, we aim at predicting a discrete output 

$$
y \in \Yspace = \{C_1, ..., C_g\}
$$

with $2 \le g < \infty$ given data $\D$.  

\lz 

In this course, we assume the classes to be encoded as

\begin{itemize}
  \item $\Yspace = \setzo$ or $\Yspace = \setmp$ (in the binary case $g = 2$)
  \item $\Yspace = \setg$  (in the multiclass case $g \ge 3$)
\end{itemize}

\vfill

% $^1$\textbf{Remark}: We will see later, that for probability / likelihood-based model derivations a 0/1-Coding and for geometric / loss-based models the -1/+1-coding is preffered. 

\end{vbframe}


\begin{vbframe}{Classification Models} 
We defined models $f: \Xspace \to \R^g$ as functions that output (continuous) \textbf{scores} / \textbf{probabilities} and \textbf{not} (discrete) classes. Why? 

\begin{itemize}
  \item From an optimization perspective, it is \textbf{much} (!) easier to optimize costs for continuous-valued functions 
  \item Scores / probabilities (for classes) contain more information than the class labels alone
  \item As we will see later, scores can easily be transformed into class labels; but class labels cannot be transformed into scores
\end{itemize}

We distinguish \textbf{scoring} and \textbf{probabilistic} classifiers.
\end{vbframe}


\begin{vbframe}{Scoring Classifiers}
\begin{itemize}
% \item Scoring classifiers assume the output variable to be -1/+1-encoded, i. e. $\Yspace = \{-1, 1\}$
\item Construct $g$ \textbf{discriminant} / \textbf{scoring functions} $f_1, ..., f_g: \Xspace \to \R$
\item Scores $f_1(\xv), \ldots, \fgx$ are transformed into classes by choosing the class with the maximum score 
$$
h(\xv) = \argmax_{k \in \setg} \fkx. 
$$ 

\item For $g = 2$, a single discriminant function $\fx = f_{1}(\xv) - f_{-1}(\xv)$ is sufficient (note that it would be natural here to label the classes with $\{+1, -1\}$)  

% \begin{eqnarray*}
 % \qquad h(\bm{x}) &=& 1 \\
 % f_1(\xv) &>&  f_{-1}(\xb) \\
 % f_1(\xb) - f_{-1}(\xb) &>& 0 \\
% f(\xb) &>& 0 
% \end{eqnarray*}

\item Class labels are constructed by $\hx = \text{sgn}(\fx)$
\item $|\fx|$ is called \enquote{confidence}
\end{itemize}
\end{vbframe}

\begin{vbframe}{Probabilistic Classifiers}
\begin{itemize}
% \item Probabilistic classifiers assume the output variable to be 0/1-encoded, i. e. $\Yspace = \{0, 1\}$
\item Construct $g$ \textbf{probability functions} $\pi_1, ..., \pi_g: \Xspace \to [0, 1],~\sum_i \pi_i = 1$ 
\item Probabilities $\pi_1(\xv), \ldots, \pigx$ are transformed into a labels by predicting the class with the maximum probability
$$
\hx = \argmax_{\{k \in \setg\}} \pikx
$$ 
\item For $g = 2$ one $\pix$ is constructed, (note that it would be natural here to label the classes with $\{0, 1\}$)

\item Probabilistic classifiers can also be seen as scoring classifiers

\item If we want to emphasize that our model outputs probabilities we denote the model as $\pix: \Xspace \to [0, 1]^g$; if we are talking about models in a general sense, we write $f$ comprising both probabilistic and scoring classifiers (context will make this clear!) 
\end{itemize}

\framebreak 


\begin{itemize}
\item Both scoring and probabilistic classifiers can output classes by thresholding (binary case) / selecting the class with the maximum score (multiclass)
\item Thresholding: $\hx:= [\pix) \ge c]$ or $\hx = [\fx \ge c]$ for some threshold $c$.
\item Usually $c = 0.5$ for probabilistic, $c = 0$ for scoring classifiers.
\item There are also versions of thresholding for the multi-class case

\end{itemize}

\begin{center}
  \includegraphics{figure_man/classifiers.png}
\end{center}

\end{vbframe} 

\begin{vbframe}{Decision regions and boundaries}
\begin{itemize}
  \item A \textbf{decision region} for class $k$ is the set of input points $\xv$ where class $k$ is assigned as prediction of our model:
$$
\Xspace_k = \{x \in \Xspace : \hx = k\}
$$

\item Points in space where the classes with maximal score are tied and the corresponding hypersurfaces are called \textbf{decision boundaries}
\begin{eqnarray*}  
\{ \xv \in \Xspace: && \exists~i \ne j \text{ s.t. } \fix = \fjx \\ && \text{and } \fix, \fjx \ge \fkx ~ \forall k \ne i, j\}
\end{eqnarray*}  

In the binary case we can simplify and generalize to the decision bound for general threshold $c$:

$$
    \{ \xv \in \Xspace : \fx = c \}
$$

If we set $c=0$ for scores and $c=0.5$ for probabilities this is consistent with the definition above.

\end{itemize}
\end{vbframe} 

\begin{vbframe}{Linear Classifiers}

If the discriminant functions $\fkx$ can be specified as linear functions (possibly through a rank-preserving,
monotone transformation $g: \R \to \R$), i. e. 

$$
  g(\fkx) = \bm{w}_k^\top \bm{x} + b_k,
$$

we will call the classifier a \textbf{linear classifier}. A tie in scores now occurs if   

\begin{eqnarray*}
  \fix &=& \fjx \\
  g(\fix)) &=& g(\fjx) \\
  \bm{w}_i^\top \xv + b_i &=& \bm{w}_j^\top \xv + b_j \\
  \left(\bm{w}_i - \bm{w}_j\right)^\top \xv + \left(b_i - b_j\right) &=& 0 
  % \bm{w}_{ij}^\top \xv + b_{ij} &=& 0 
\end{eqnarray*}

This is a \textbf{hyperplane} separating two classes. 

% \lz

% Note that linear classifiers can represent non-linear decision boundaries in the original input space if we use derived features like higher order interactions, polynomial features, basis function expansions, etc.


\end{vbframe}


\begin{vbframe}{Decision boundary examples}

<<echo=FALSE, fig.height=6>>=

library(mlr)
library(gridExtra)

task = sonar.task

ff = function(a, b, ...) {
  feats = c("V1", "V2")
  pl = plot_lp(makeLearner(a, ...), task = task, features = feats, cv = 0) 
  pl = pl + ggtitle(b) + xlim(0, 0.05) + ylim(0, 0.1)
}

grid.arrange(ncol = 2, nrow = 2,
  ff("classif.logreg", "Log. Regr."),
  ff("classif.naiveBayes", "Naive Bayes"),
  ff("classif.rpart", "CART Tree"),
  ff("classif.ksvm", "SVM", sigma = 0.001))
@

\end{vbframe}


\endlecture


